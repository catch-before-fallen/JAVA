<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"


       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--扫描控制层组件-->
    <context:component-scan base-package="com.ssm.web.controller"/>

    <!--开启MVC静态资源处理器
    当前工程的web.xml的DispatcherServlet的url-pattern是/
        tomcat中配置的DefaultServlet的url-pattern也是/
        此时浏览器发送的请求会优先被DispatcherServlet获取到并进行处理，
        但DispatcherServlet无法处理静态的资源
        若配置了<mvc:default-servlet-handler/>，浏览器发送的请求会优先被DefaultServlet处理；
        若同时配置了<mvc:default-servlet-handler/>和  <mvc:annotation-driven/>，
        则浏览器发送的请求首先会被DispatcherServlet处理，无法处理的资源再交给DefaultServlet处理-->
    <mvc:default-servlet-handler/>

    <!--开启mvc注解驱动-->
    <!--开启注解驱动时可能会报 500：服务器内部错误
    解决办法：查看选择的注解驱动是否正确，并且xsi：后面一定要有如下地址：
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       -->
    <mvc:annotation-driven/>

    <!--配置静态资源
        mapping：对对应的requestMapping样式进行处理
        location：静态资源所在的位置，默认从webapp目录下面开始
        -->
    <mvc:resources mapping="css/**" location="/css/"/>
    <mvc:resources mapping="js/**" location="/js/"/>
    <mvc:resources mapping="images/**" location="/images/"/>
    <mvc:resources mapping="video/**" location="/video/"/>
    <!--管理员样式-->
    <mvc:resources mapping="css/**" location="/css/admin/"/>


    <!--配置MVC视图控制器-->
    <!--<mvc:view-controller path="/" view-name="home"></mvc:view-controller>-->


    <!--配置SpringMVC拦截器-->
    <!--拦截器的功能：内部有三个方法会在执行Spring默认的DispatcherServlet先后执行，方法需要自己进行重写
     1.public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)：
     在DispatcherServlet执行之前执行，返回值为true时表示放行,为false表示拦截
      2.public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)
      在DispatcherServlet执行之后执行，其中参数ModelAndView表示的含义：Model作用是往请求域中共享数据，view的作用·是实现页面跳转
      3. public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)
        在DispatcherServlet执行之后，视图渲染完成之前执行，参数Exception表示所有异常
     -->
    <!--<mvc:interceptors>-->
    <!--<bean class="com.study.mbt.controller.FirstInterceptor" ></bean>-->
    <!--</mvc:interceptors>-->

    <!--配置文件上传解析器-->
    <bean  id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

    </bean>


    <!--配置thymeleaf视图解析器的相关内容-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!--视图前缀-->
                        <property name="prefix" value="/WEB-INF/pages/"/>
                        <!--视图后缀-->
                        <property name="suffix" value=".html"/>
                        <property name="characterEncoding" value="UTF-8"/>
                        <property name="templateMode" value="HTML5"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


</beans>