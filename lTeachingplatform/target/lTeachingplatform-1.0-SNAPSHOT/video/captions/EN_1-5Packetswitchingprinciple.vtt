WEBVTT
0
00:00:00.900 --> 00:00:06.260
When the Internet was 1st designed. it was based on a controversial revolutionary idea packet switching.

1
00:00:06.620 --> 00:00:11.820
Nowadays. it seems straightforward in the obvious way to build networks. but that wasn't always the case.

2
00:00:12.120 --> 00:00:18.730
It's a very simple idea. But of course. as it is with simple ideas. there are many interesting implications that arise once you put it in a practice.

3
00:00:18.990 --> 00:00:26.080
We'll spend an entire week of the course on packet switching and its implications. but in this video. we present the high level idea and its immediate benefits.

4
00:00:28.480 --> 00:00:34.280
A packet is a self contained unit of data that carries information necessary for it to reach its destination.

5
00:00:35.040 --> 00:00:41.320
Packet switching is the idea that we break our data up into discrete. self contain chunks of data.

6
00:00:41.560 --> 00:00:47.100
Each chunk. call the packet. carries sufficient information that a network can deliver the packet all the way to its destination.

7
00:00:47.580 --> 00:01:00.960
So let's say we have a source in a destination and a network of packets. which is A-B and C between them. when a receives a packet for the destination. it sends it along the link to be When B receives a packet for the destination. it sends along to see.

8
00:01:01.260 --> 00:01:11.100
And when C receives a packet for the destination. it sends it to the destination directly. in the simplest form of packets. which. in each packet. is routed separately and independently.

9
00:01:11.280 --> 00:01:14.830
E.g.. let's say there's another switch connected to B called D.

10
00:01:15.190 --> 00:01:25.380
Immediately after sending a packet to see. B can send the next packet to D. or if the next packet were also to the destination. it would send two packets back to back to see.

11
00:01:26.660 --> 00:01:29.020
Here's a simple definition of packet switching.

12
00:01:29.860 --> 00:01:35.020
Means that independently. for each arriving packet. we pick its outgoing link.

13
00:01:35.320 --> 00:01:39.580
If the link is free. we send it else we hold the packet for later.

14
00:01:41.060 --> 00:01:43.700
Here's one example of how packet switching can work.

15
00:01:43.750 --> 00:01:50.250
Each packet contains an explicit route specifying the ideas of each packet switch along the way. all the way to the destination.

16
00:01:50.410 --> 00:01:54.870
We call this self routing. or source routing. because the source specifies the route.

17
00:01:55.190 --> 00:02:02.210
When the source sends a packet. it puts in the packet A-B. it puts in the packet A-B and C. and then the destination.

18
00:02:02.630 --> 00:02:13.310
It forwards the packet away. A. looks inside the header and sees the next top his B. so it forwards the packet to be B sends the next. sees the next top at C and C say it sees the last top is the destination.

19
00:02:13.530 --> 00:02:20.290
Turns out. the Internet supports this source routing. but it's generally turned off because it raises big security issues.

20
00:02:20.290 --> 00:02:29.810
One simple optimization. and what the Internet mostly does to day is to place a small amount of state in each switch. which tells at which next top to send packets to.

21
00:02:30.040 --> 00:02:33.200
E.g.. a switch can have a table of destination addresses and the next top.

22
00:02:33.360 --> 00:02:40.340
When it receives a packet. it looks up the desk. the address in the table. and sends the packet to the appropriate next top.

23
00:02:40.540 --> 00:02:45.340
In this model. all the packets packet needs to carry is the destination address.

24
00:02:45.610 --> 00:02:49.230
Using the address. each switch along the way. can make the right decision.

25
00:02:49.390 --> 00:02:55.610
E.g.. in our network. here. a's table says the packets to destination should go to switch B switch.

26
00:02:55.770 --> 00:02:59.510
Bees table says packets to destination should go to switch sea. and so on.

27
00:03:00.990 --> 00:03:03.510
Packet switching has two really nice properties.

28
00:03:03.780 --> 00:03:07.560
The 1st is that a switch can make individual. local decisions for each packet.

29
00:03:07.860 --> 00:03:09.500
It doesn't need to keep extra state on the packets.

30
00:03:09.660 --> 00:03:15.970
It's seen whether two packets go to the same destination. even if many packets are part of some larger transfer protocol.

31
00:03:16.130 --> 00:03:17.970
The switch doesn't need to know or care this.

32
00:03:17.990 --> 00:03:23.670
Which doesn't need to know that some packets are a skype call. others are a Webb requests. and others still are a firmer update for your computer.

33
00:03:23.830 --> 00:03:27.530
It just for its packets. This greatly simplifies the switch.

34
00:03:28.450 --> 00:03:33.770
The 2nd is that it lets us switch efficiently share a link between many parties.

35
00:03:33.980 --> 00:03:37.860
E.g. consider a wireless router in a home with two people browsing the Internet in their laptops.

36
00:03:38.020 --> 00:03:43.950
If one person is reading a page. then the other person can download a file at the full speed of the link.

37
00:03:44.150 --> 00:03:48.510
If the 1st person starts loading a web page. the link can bere between two of them.

38
00:03:48.770 --> 00:03:52.550
Once the download completes. the 1st person can use the full speed of the link.

39
00:03:52.670 --> 00:03:57.040
These two points are really important. so go to some greater detail on both of them.

40
00:03:57.600 --> 00:04:01.340
Of course. when we communicate. we don't usually send only one packet.

41
00:04:01.500 --> 00:04:06.540
We send many. e.g. a voice cool consists of many consecutive packets. all part of the same communication.

42
00:04:06.840 --> 00:04:09.340
We call this sequence of packets a flow.

43
00:04:09.790 --> 00:04:16.220
More specifically. a flow is a collection of datagrams belonging to the same end to end communication. e.g.

44
00:04:16.380 --> 00:04:25.700
a TCP connection. Let's 1st of all. look at how each packet is routed independently.

45
00:04:27.620 --> 00:04:32.220
Because each packet is self contained. a switch doesn't need to know about groups of packets or flows.

46
00:04:32.520 --> 00:04:36.740
Imagine if every switch had to keep track of every single web connection passing through it.

47
00:04:36.900 --> 00:04:40.720
This would require a huge amount of state that would be really hard to manage.

48
00:04:41.030 --> 00:04:46.230
Instead. treating each packet independently. means the switch can be much simpler to build. manage and troubleshoot.

49
00:04:47.070 --> 00:04:50.870
The switch doesn't need to worry about adding or removing with per flow state.

50
00:04:50.930 --> 00:04:58.650
Imagine if every time you wanted to load a webpage. you had to communicate with every switch along the path just to set up the state so that your request could get through.

51
00:04:59.100 --> 00:05:01.420
This could make things much. much slower.

52
00:05:01.620 --> 00:05:05.180
Instead. you can just send packets and the switches forward them appropriately.

53
00:05:07.040 --> 00:05:11.980
The switches also don't need to store the state. because switches have to be really fast.

54
00:05:12.140 --> 00:05:12.630
They need to store

55
00:05:12.860 --> 00:05:15.560
the state in very fast memory. which would be expensive.

56
00:05:16.350 --> 00:05:21.950
This let switch switches focus on doing just one thing. forwarding packets quickly and efficiently.

57
00:05:23.910 --> 00:05:26.950
Finally. it means switches don't have to worry about failures.

58
00:05:26.990 --> 00:05:32.570
Imagine. e.g. what happens when you start a web request. but then your tablet runs out of energy.

59
00:05:33.090 --> 00:05:49.200
The switch is going to keep the puff low state for the request. but if one of the nodes that created the state fails. the switch needs to know how to clean up after otherwise you can have millions billions. or however. many of dead flows eating up your memory with packet switching a switch has no per end point state.

60
00:05:49.240 --> 00:05:51.620
The tablet dies. The switch doesn't care.

61
00:05:51.780 --> 00:05:54.440
It just means that it stops receiving packets from it.

62
00:05:54.820 --> 00:05:59.000
In this way. the switch is more functionally independent of the computer sending traffic through it.

63
00:06:00.040 --> 00:06:02.380
Think about how you typically use the Internet.

64
00:06:02.540 --> 00:06:07.310
Your use is birthday. You lit a webpage. then read it. then load another one.

65
00:06:07.470 --> 00:06:09.910
You download a few songs from itunes. then listen to them.

66
00:06:10.070 --> 00:06:12.890
You stream a show from Netflix for 45 min then stop.

67
00:06:13.030 --> 00:06:24.990
Data traffic is birthday rather than always sending and receiving data at a fixed rate. Usage jumps and drops. goes up and down over time. although a large scale changes in peaks and data traffic.

68
00:06:25.410 --> 00:06:29.350
03:00 p.m. in the afternoon is typically high. as is 08:00 p.m.. while two in the morning is low.

69
00:06:29.660 --> 00:06:31.580
On a smaller scale. is very bursty.

70
00:06:31.740 --> 00:06:34.000
And these beasts bursts are often independent.

71
00:06:34.080 --> 00:06:37.160
Let's say you and your friend are both browsing the web at a coffee shop.

72
00:06:37.320 --> 00:06:40.900
When you load a new page. when your friend loads a new page. are mostly independent.

73
00:06:41.160 --> 00:06:43.340
Sometimes you might overlap. but often they won't.

74
00:06:43.590 --> 00:06:50.870
By treating all of your traffic is just packets. the wireless router can very effectively and chimp simply share its capacity between you.

75
00:06:51.030 --> 00:06:55.850
If you're loading a page. when your friend is reading. the wireless router can give all of its capacity to your packets.

76
00:06:56.270 --> 00:07:01.150
Similarly. if your friend is loading a page and your reading. the router can give all of its capacity in your friends packets.

77
00:07:01.410 --> 00:07:07.270
The link doesn't need to go partially idle. because one of you is in using it. and if you're both using it. then the link can be shared between you.

78
00:07:07.890 --> 00:07:16.290
This idea of taking a single resource and sharing it across multiple users in a probableistic or statistical way. it's called statistical multiplexing.

79
00:07:16.370 --> 00:07:22.650
It's statistical and that each user receives a statistical share of the resource based on how others are using it.

80
00:07:22.840 --> 00:07:25.040
E.g.. if your friend is reading. you can use all of the link.

81
00:07:25.140 --> 00:07:28.740
If both of you are loading a page. you receive half of the link.

82
00:07:30.080 --> 00:07:32.880
So there are two major benefits of packet switching.

83
00:07:33.280 --> 00:07:37.520
1st. it makes the switch is simple. because they don't need to know about flows of packets.

84
00:07:38.050 --> 00:07:43.250
And 2nd. its lets us sufficiently share the capacity among many flows sharing a link.

85
00:07:45.130 --> 00:07:53.230
This simple building block was revolutionary at the time. but it's now accepted as the common way to build networks the.
