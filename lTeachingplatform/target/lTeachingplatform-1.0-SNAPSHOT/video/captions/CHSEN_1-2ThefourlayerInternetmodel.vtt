WEBVTT
0
00:00:00.700 --> 00:00:06.030
在上个视频中 你学习了各种不同的应用程序 如bit torrent skype
In the last video. you learned how a variety of different applications. such as bit. torrent. skype

1
00:00:06.320 --> 00:00:13.380
和韦伯 都在互联网上使用非常相似的模型进行通信 基本上是双向可靠的咬流
and the Webb. all communicate over the Internet using a very similar model. basically a bidirectional. reliable bitestream.

2
00:00:13.780 --> 00:00:20.190
需要很多不同的部分一起工作 为我们的应用程序创建这个可靠的通信模型
Takes a lot of different pieces working together to create this reliable communication model for our applications.

3
00:00:20.510 --> 00:00:32.460
但是 尽管我们使用大量不同的互联网应用程序以非常不同的速度发送各种数据 但应用程序发送和接收数据的方式却惊人地相似
But even though we use a huge variety of different Internet applications sending many kinds of data at very different speeds. there are surprisingly strong similarities in the way applications send and receive data.

4
00:00:32.760 --> 00:00:40.210
例如 应用程序希望发送和接收数据 而不必担心数据在Internet上所采用的路径或路由
E.G.. applications want to send and receive data without having to worry about the path or route that the data takes across the Internet.

5
00:00:40.380 --> 00:00:50.230
几乎所有应用程序都希望确信它们的数据被正确接收 任何丢失或损坏的数据都会自动重新传输 直到正确接收为止
And almost all applications want to be confident that their data is correctly received. with any lost or corrupted data automatically retransmitted until it's received correctly.

6
00:00:51.470 --> 00:01:06.200
早期的互联网先驱创建了四层互联网模型来描述组成互联网的操作层次结构 这样应用程序就可以反复重用相同的构建块 而不必为每个新应用程序从头创建它们
The early Internet pioneers created the four layer Internet model to describe the hierarchy of operations that make up the Internet. so that applications can reuse the same building blocks over and over again. without having to create them from scratch for every new application.

7
00:01:06.480 --> 00:01:12.520
分层是网络中非常重要和经常使用的概念 在本课程中会多次看到它
Layering is really important and frequently used concept in networking. and will be seeing it many. many times throughout this course.

8
00:01:12.690 --> 00:01:19.470
作为一个专门讨论分层概念的视频 让我们看看四层互联网模型中的每一层都做了什么
As even a video devoted just to the concept of layering. let's look at what each layer of the four layer Internet model does.

9
00:01:19.680 --> 00:01:25.900
记住这四层的存在是为了使终端主机中的应用程序能够可靠地通信
It helps to remember that all four layers are there to enable applications in the end hosts to communicate reliably.

10
00:01:26.050 --> 00:01:28.970
为了解释它是如何工作的 我将从底层开始
To explain how it works. I'm going to start at the bottom layer.

11
00:01:29.270 --> 00:01:40.560
我们将看到每一层都有不同的职责 每一层都在下一层之上构建一个服务 一直到顶部 在那里我们在应用程序之间有双向的 可靠的比特流通信
We'll see that each layer has a different responsibility. with each layer building a service on top of the one below. all the way to the top. where we have the bidirectional. reliable bitestream communication between applications.

12
00:01:40.790 --> 00:01:41.630
好的 让我们从一个链接开始
OK. let's start with a link.

13
00:01:41.790 --> 00:01:46.410
在那里 因特网由终端主机 链路和路由器组成
There. The Internet is made up of end hosts. links and routers.

14
00:01:46.640 --> 00:01:49.440
数据通过跳到林肯转弯处传输
Data is delivered hot by hop over reach Lincoln turn.

15
00:01:49.820 --> 00:01:51.400
数据被点燃 以包的形式传递
Data is lit. delivered in packets.

16
00:01:51.600 --> 00:02:07.140
一个包是一个自成体系的单元 由我们想要传递的数据和一个报头组成 报头告诉网络数据包将被传递到哪里 从哪里来 等等 链路klair的工作是将数据传输过去 一次一个链路
A packet is a self contained unit consisting of the data we want to be delivered. along with a header that tells the network. where the packet is to be delivered. where it came from. and so on The linklair's job is to carry the data over. one link at a time.

17
00:02:07.530 --> 00:02:09.350
你可能听说过以太网和wifi
You've probably heard of ethernet and wifi.

18
00:02:09.570 --> 00:02:12.070
这是两个不同的链接玩家的例子
These are two examples of different link players.

19
00:02:14.030 --> 00:02:18.600
下一层对我们来说是最重要的一层 网络层
The next layer up is for us. the most important layer. the network layer.

20
00:02:18.720 --> 00:02:25.920
网络层的工作是在因特网上从源端到目的端传递数据包
The networks layer's job is to deliver packets end to end across the Internet. from the source to the destination.

21
00:02:26.140 --> 00:02:28.580
包是网络中重要的组成部分
A packet is an important building block in the network.

22
00:02:28.740 --> 00:02:39.000
数据包是我们给数据集合的名称 头部和头部描述了数据是什么 它要去哪里 它来自哪里 就像我们上次看到的那样 你经常会看到包是这样画的
A packet is the name we give to that collection of data. with the header and the head of that describes what the data is. where it's going and where it came from. as we saw in the last light. you'll often see pack packets drawn like this.

23
00:02:40.830 --> 00:02:43.430
不知道哪一层数据包被称为数据报
No what layer packets are called datagrams.

24
00:02:43.470 --> 00:02:51.610
它们由一些数据和一个包含这两个和来自地址的头组成 就像我们把这两个和来自地址放在一封信中一样
They consist of some data and a header containing the two and from addresses. just like we put the two and from addresses in a letter.

25
00:02:53.410 --> 00:03:00.070
网络将数据报交给链路层 告诉它通过第一条链路发送数据报
The network hands the datagram to the link layer. telling it to send the datagram over the 1st link.

26
00:03:00.090 --> 00:03:03.530
换句话说 链路层向网络层提供服务
In other words. the link layer is providing a service to the network layer.

27
00:03:03.800 --> 00:03:10.440
本质上 链路层是说 如果你给我一个数据报要发送 我将通过一个链路为你传输它
Essentially. the link layer is saying. if you give me a datagram to send. I'll transmit it over one link for you.

28
00:03:12.440 --> 00:03:14.520
在链路的另一端是路由器
At the other end of the link is a router.

29
00:03:14.820 --> 00:03:21.160
路由器的链路层接受来自链路的数据报 并将其交给路由器内部的网络层
The link layer of the router accepts the datagram from the link and hands it up to the network layer inside the router.

30
00:03:21.380 --> 00:03:30.300
路由器上的网络层检查数据报的目的地址 并负责将数据报一次一跳地路由到最终目的地
The network layer on the router examines the destination address of the datagram and is responsible for routing the datagram. one hop at a time. towards its eventual destination.

31
00:03:30.570 --> 00:03:44.170
它通过将它再次发送到链路层以承载下一个链路 该链路被传递到下一个路由器的网络层 以此类推 直到到达目的地的网络层
It does this by sending it to the link layer again to carried over the next link. which is passed to the network layer at the next router. and so on. until it reaches the network layer at the destination.

32
00:03:44.330 --> 00:03:53.030
最后 请注意网络层不需要关心链路层如何在每个链路上发送电报
Eventually. notice that the network layer does not need to concern itself with how the link layer sends the telegram over each link.

33
00:03:53.380 --> 00:03:55.920
事实上 不同的链接层以非常不同的方式工作
In fact. different link layers work in very different ways.

34
00:03:55.960 --> 00:04:00.720
乙烷和wifi显然是非常不同的 我们将在后面更详细地了解它们
Ethanette and wifi are clearly very different. and we're going to be learning about them in more detail later.

35
00:04:00.990 --> 00:04:08.840
网络层和链路层之间的关注点分离使得每个层都可以专注于自己的工作 而不必担心另一层如何工作
This separation of concerns between the network layer and the link layer allows each to focus on its job without worrying about how the other layer works.

36
00:04:09.040 --> 00:04:16.440
这也意味着单个网络层有一种通用的方式与许多不同的链接层进行通信 只需将数据报交给它们发送即可
It also means that a single network layer has a common way to talk to many different link layers by simply handing them datagrams to send.

37
00:04:16.470 --> 00:04:24.590
这种关注点的分离是通过每一层的模块化和一个通用的 定义良好的API到下一层实现的
This separation of concerns is made possible by the modularity of each layer and a common. well defined API to the layer below.

38
00:04:27.130 --> 00:04:29.690
在Internet中 网络层是特殊的
In the Internet. the network layer is special.

39
00:04:29.850 --> 00:04:33.930
当我们向因特网发送数据包时 我们必须使用因特网协议
When we send packets into the Internet. we must use the Internet protocol.

40
00:04:34.400 --> 00:04:38.320
因特网协议(IP)将因特网连接在一起
It is the Internet protocol. or IP. that holds the Internet together.

41
00:04:38.700 --> 00:04:44.200
我们了解了更多关于IP的细节和后面的视频 但现在 了解一些关于IP的基本事实是很好的
We learn more about the details of IP and later videos. but for now. it's good to know some basic facts about IP.

42
00:04:45.690 --> 00:04:52.480
首先 IP尽最大努力将我们的数据报传送到另一端 但它没有做出承诺
1st of all. IP makes a best effort attempt to deliver our datagrams to the other end. but it makes no promises.

43
00:04:53.080 --> 00:04:55.800
IP数据报可能会丢失
2nd IP Datagrams can get lost.

44
00:04:56.180 --> 00:04:58.790
它们可能会被破坏 也可能被损坏
They can be delivered out of order. and they can be corrupted.

45
00:04:58.970 --> 00:05:03.990
没有保证 这可能会让人感到意外
There are no guarantees. This may come as a surprise.

46
00:05:04.210 --> 00:05:09.610
你可能会问 如果不能保证数据包能被发送 互联网怎么能正常工作呢
You might be asking. how can the Internet work at all when the packets are not guaranteed to be delivered?

47
00:05:10.370 --> 00:05:22.960
好吧 如果一个应用程序想要保证它的数据在必要时被重新传输 并且将被有序且无损坏地交付给应用程序 那么它需要另一个运行在IP之上的协议
Well. if an application wants a guarantee that its data will be re transmitted when necessary and will be delivered to the application in order and without corruption. then it needs another protocol running on top of IP.

48
00:05:23.160 --> 00:05:24.340
这就是工作
That's the job of

49
00:05:24.700 --> 00:05:32.750
运输实验室 最常见的传输层是TCP 或传输控制协议
the transport lab. The most common transport layer is TCP. or the Transmission Control Protocol.

50
00:05:32.910 --> 00:05:38.330
你可能听说过TCPPIP 它是指应用程序同时使用TCP和IP
Youve probably heard of TCPPIP. which is when an application uses both TCP and IP together.

51
00:05:39.780 --> 00:05:49.270
Tcp的工作是确保由Internet一端的应用程序发送的数据以正确的顺序正确地传递到Internet另一端的应用程序
Tcp's job is to make sure that the data sent by an application at one end of the Internet is correctly delivered in the right order to the application at the other end of the Internet.

52
00:05:49.690 --> 00:05:55.290
如果网络层丢弃了一些数据报 如果需要 TCP将多次传输它们
If the network layers drop some datagrams. TCP will transmit them multiple times. if need be.

53
00:05:55.530 --> 00:06:04.700
如果网络底层传输数据的顺序是错误的 可能是因为两个数据包到达目的地的路径不同 TCP将把数据重新放回正确的顺序
If the network lower delivers them out of order. perhaps because two packets follow a different path to their destination. TCP will put the data back into the correct order again.

54
00:06:04.900 --> 00:06:08.940
在后面的视频中 您将学到很多关于TCP及其工作原理的知识
In later videos. you'll learn a lot about TCP and how it works.

55
00:06:09.050 --> 00:06:17.510
现在 您需要记住的主要事情是 TCP为应用程序提供了一种服务 该服务保证数据按顺序正确地传递
For now. the main thing you need to remember is that TCP provides a service to an application that guarantees correct in order delivery of data.

56
00:06:17.670 --> 00:06:33.260
运行在网络层服务之上的无网络层在底层提供了一个不可靠的数据报传递服务 我相信你可以想象 像web客户端或电子邮件客户端这样的应用程序确实会发现TCP非常有用
Running on top of the network layer service. the network less layer is providing an unreliable datagram delivery service underneath. as I'm sure you can imagine. applications such as a web client or an email client find TCP very useful. indeed.

57
00:06:33.340 --> 00:06:40.860
通过使用TCP来确保正确地传递数据 他们不必担心在应用程序中实现所有机制
By employing TCP to make sure data is delivered correctly. they don't have to worry about implementing all of the mechanisms inside the application.

58
00:06:41.170 --> 00:06:49.580
他们可以利用其他开发人员多年来为正确实现TCP所付出的巨大努力 然后重用它来正确地交付延迟数据
They can take advantage of the huge effort that other developers have put into correctly implementing TCP over the years. and then reuse it to deliver delay data correctly.

59
00:06:49.620 --> 00:06:57.900
重用是分层的一大优势 但并非所有应用程序都需要正确交付数据
Reuse is a big advantage of layering. but not all applications need data to be delivered correctly.

60
00:06:57.970 --> 00:07:06.250
例如 如果一个视频会议应用程序在一个数据包中发送一个视频片段 等待数据包重新传输多次可能是没有意义的
E.g.. if a video conference application is sending a snippet of video in a packet. there may be no point waiting for the packet to be re transmitted multiple times.

61
00:07:06.680 --> 00:07:11.260
最好还是向前看 有些应用程序根本不需要TCP服务
Better to just move on. Some applications just don't need the TCP service.

62
00:07:11.740 --> 00:07:18.270
如果应用程序不需要可靠的传输 它可以使用更简单的UDP或数据报协议
If an application doesn't need reliable delivery. it can use the much simpler UDP or use a datagram protocol.

63
00:07:18.430 --> 00:07:25.890
相反 UDP是一种可选的传输层 它将应用程序数据捆绑起来 并将其交给网络层 以便传递到另一端
Instead. UDP is an alternative transport layer that bundles up application data and hands it to the network layer for delivery to the other end.

64
00:07:26.050 --> 00:07:28.730
EDP完全不提供送货保证
EDP offers no delivery guarantees at all.

65
00:07:29.530 --> 00:07:36.570
换句话说 应用程序至少可以选择两种不同的传输层服务TCP和UDP
In other words. an application has the choice of at least two different transport layers services TCP and UDP.

66
00:07:36.930 --> 00:07:41.790
事实上 还有许多其他选择 但这些是最常用的传输层服务
There are. in fact. many other choices too. but these are the most commonly used transport layer services.

67
00:07:44.110 --> 00:07:48.270
最后 我们在四层模型的顶部有应用程序层
Finally. we have the application layer at the top of the four layer model.

68
00:07:48.570 --> 00:07:52.370
当然 有成千上万的应用程序在使用因特网
There are. of course. many thousands of applications using the Internet.

69
00:07:52.650 --> 00:08:02.060
虽然每个应用程序都是不同的 但它可以通过使用从应用层到下面的TCP或UTP服务的定义良好的API来重用传输层
While each application is different. it can reuse the transport layer by using the well defined API from the application layer to the TCP or UTP service beneath.

70
00:08:03.210 --> 00:08:10.130
正如我们在上个视频中看到的 应用程序通常需要两点之间双向可靠的咬合力
As we saw in the last video. applications typically want a bidirectional. reliable bite strain between two and points.

71
00:08:10.510 --> 00:08:12.730
他们想送什么就送什么
They can send whatever bites dream they want.

72
00:08:12.890 --> 00:08:18.430
应用程序有自己的协议来定义在两个端点之间流动的数据的语法和语义
And applications have their own protocol to define the syntax and semantics of data flowing between the two endpoints.

73
00:08:20.620 --> 00:08:28.410
例如 正如我们在上个视频中看到的 当一个web客户端从web服务器请求一个页面时 web客户端发送一个get请求
E.g.. as we saw in the last video. when a web client requests a page from a web server. the web client sends a get request.

74
00:08:28.830 --> 00:08:32.930
这是超文本传输协议(HTTP)的命令之一
This is one of the commands of the Hypertext Transfer protocol. or HTTP.

75
00:08:33.420 --> 00:08:40.540
HDTP规定get命令作为asky字符串连同被请求页面的url一起发送
HDTP dictates that the get command is sent as an asky string along with the url of the page being requested.

76
00:08:41.750 --> 00:08:50.070
就应用层而言 get请求直接发送到另一端的对等端web服务器应用程序
As far as the application layer is concerned. the get request is sent directly to its peer at the other end. the web server application.

77
00:08:51.870 --> 00:08:57.670
应用程序不需要知道数据是如何到达那里的 也不需要知道需要重新传输多少次
The application doesn't need to know how the data got there or how many times it needed to be re transmitted.

78
00:08:57.870 --> 00:09:05.280
在Webb客户机上 应用程序层将get请求传递给TCPLA TCPLA提供确保可靠地交付该请求的服务
At the Webb client. the application layer hands the get request to the TCPLA. which provides the service of making sure it is reliably delivered.

79
00:09:05.440 --> 00:09:09.980
它使用网络层的服务来实现这一点 而网络层又使用链路层的服务
It does this using the services of the network layer. which in turn uses the services of the link layer.

80
00:09:10.150 --> 00:09:13.190
我们说每一层都与其对等层通信
We say that each layer communicates with its peer layer.

81
00:09:13.570 --> 00:09:31.580
这就好像每一层只与链路另一端的同一层或互联网通信 而不考虑下面一层如何在那里获得数据 并将它们放在一起 然后网络工程师发现将构成互联网的所有功能安排到层中很方便
It's as if each layer is only communicating with the same layer at the other end of the link. or Internet. without regard for how the layer below gets the data there. putting it all together. then network engineers find it convenient to arrange all the functions that make up the Internet into layers.

82
00:09:31.860 --> 00:09:38.450
顶部是应用程序 如Bitterrent Skype或WorldWideWebb 它与目的地的对等层进行通信
The top is the application. such as Bitterrent or Skype or the World Wide Webb. which talks to its peer layer at the destination.

83
00:09:38.570 --> 00:09:47.220
当应用程序有数据要发送时 它将数据交给传输层 传输层负责将数据可靠地传输到另一端
When the application has data to send. it hands the data to the transport layer. which has the job of delivering the data reliably or not to the other end.

84
00:09:47.420 --> 00:09:55.760
传输层通过将数据交给网络层将数据发送到另一端 网络层的工作是将数据分解成数据包 每个数据包都有正确的目的地地址
The transport layer sends data to the other end by handing it to the network layer. which has the job of breaking the data into packets. each with the correct destination addressed.

85
00:09:55.920 --> 00:10:00.880
最后 数据包被交给链路层 链路层负责将数据包从一跳传递到下一跳
Finally. the packets are handed to the link layer. which has the responsibility of delivering the packet from one hop to the next.

86
00:10:01.040 --> 00:10:05.630
在它的路径上 数据通过从一个路径跳到下一个路径而变得热
Along its path. the data makes its way hot by hop from one route to the next.

87
00:10:05.790 --> 00:10:09.800
网络层将它提供给下一个路由器 一次一个 直到到达目的地
The network layer affords it to the next router. one at a time until it reaches the destination.

88
00:10:09.960 --> 00:10:13.710
在那里 数据被层层传递 直到到达应用程序
There. the data is passed up the layers until it reaches the application.

89
00:10:15.300 --> 00:10:17.910
总之 应用
So in summary. applications by

90
00:10:18.360 --> 00:10:21.780
应用程序之间的定向 可靠的比特流 通常是这样 但并不总是这样
directional. reliable bitestream between applications. typically. but not always.

91
00:10:21.860 --> 00:10:22.590
他们使用
And they use

92
00:10:22.700 --> 00:10:28.340
应用程序特定的语义 这将在后面学习 如HTTP或比特洪流
application specific semantics. which will be learning about later. such as HTTP or bit torrent.

93
00:10:28.960 --> 00:10:29.980
传输层
The transport layer

94
00:10:30.420 --> 00:10:38.470
通常情况下 保证数据的正确顺序传递 并结束和控制拥塞 尽管有些应用程序不需要这些 因此它们可以使用不同的传输层
typically guarantees correct in order delivery of data and to end and controls congestion. although some applications don't need this. and so they can use a different transport layer.

95
00:10:38.630 --> 00:10:46.230
相反 网络层交付数据报 最后 它提供了一种没有保证的尽力交付服务
Instead. the network layer delivers datagrams. and to end. it's providing a best effort delivery service with no guarantees.

96
00:10:46.390 --> 00:10:48.090
我们必须使用互联网协议
We must use the Internet protocol.

97
00:10:48.420 --> 00:10:53.700
Linklad发送终端主机和ARTR之间或两台路由器之间的单链路数据
The Link lad delivers data of a single link between an end host and ARTR. or between two routers.

98
00:10:55.980 --> 00:11:04.380
我想让你们知道另外两件事 被认为是互联网的浪费
There's two extra things I'd like you to know erred to as the thin waste of the Internet.

99
00:11:04.980 --> 00:11:09.760
这是因为如果我们想使用互联网 我们就必须使用互联网协议
This is because if we want to used the Internet. we have to use the Internet protocol.

100
00:11:09.920 --> 00:11:13.900
我们别无选择 但是我们也为玩家提供了许多选择
We have no choice. But we have lots of choices for linked players.

101
00:11:14.310 --> 00:11:20.810
IP在很多很多不同的链路层上运行 比如以太网 wifi dslG 蜂窝网络等等
IP runs over many. many different link layers. such as ethernet. wifi. dsl G. cellular and so on.

102
00:11:21.330 --> 00:11:26.250
在I-P-L之上 我们可以在许多不同的传输层之间进行选择
And on top of the I-P-L. we can choose between many different transport layers.

103
00:11:26.670 --> 00:11:28.970
我们已经听说过TCP和UDP
We are already heard about TCP and UDP.

104
00:11:29.190 --> 00:11:32.430
还有实时数据的RTP 还有很多其他的
There's also RTP for real time data. and many others too.

105
00:11:32.590 --> 00:11:36.370
当然 上面还有成千上万个不同的应用程序
And of course. there are tens of thousands of different applications sitting on top.

106
00:11:38.910 --> 00:11:48.410
我想让你们知道的第二件事是 在20世纪80年代 国际标准组织(ISO)创建了一个七层模型来表示任何类型的网络
The 2nd thing I want you to know is that in the 1980s. the International Standards Organization. or ISO. created a seven layer model to represent any type of network.

107
00:11:49.090 --> 00:11:54.130
它被称为七层开放系统互连 或OSI模型
It was called the Seven Layer Open Systems Interconnection. or OSI model.

108
00:11:54.260 --> 00:12:00.900
我们不需要在这门课上花任何时间 因为它已经被四层互联网模型所取代
We don't need to spend any time on it in this course. because it's been replaced by the four layer Internet model for all intense and purposes.

109
00:12:01.100 --> 00:12:03.840
但如果你感兴趣 你可以找到任何网络教科书
But if you're interested. you'll find any networking textbook.

110
00:12:04.000 --> 00:12:07.780
维基百科对这七层进行了详细的描述
And Wikipedia describes the seven layers in lots and lots of detail.

111
00:12:09.950 --> 00:12:15.880
七层模型定义了后来在四层互联网模型中合并的层 例如
The seven layer model defines layers that were combined in the four layer Internet model later. e.g.

112
00:12:16.040 --> 00:12:29.570
我们今天所说的链路即链路层 被分为定义帧格式的链路层和定义诸如电缆上的电压级别或连接器的物理尺寸的物理层
what we call the link that link layer today. was separated into the link layer that defined the framing format. and the physical layer. that defined things like the voltage levels on the cable or the physical dimensions of a connector.

113
00:12:30.580 --> 00:12:34.620
在这两个模型中 网络层基本相同
The network layer is pretty much the same in both models.

114
00:12:36.140 --> 00:12:39.640
传输层和应用层分别由两个层表示
The transport and applications layer is each represented by two layers.

115
00:12:39.660 --> 00:12:47.120
在美国模型中 这些是常用的互联网协议的例子 例如
In the USA models. these are examples of commonly used Internet protocols. e.g.

116
00:12:47.280 --> 00:12:54.850
HDTP在Asky协议中传递其大部分数据 以及它们如何映射到美国编号方案
HDTP. which passes most of its data in the protocol in Asky. and how they mapped to the USA numbering scheme.

117
00:12:55.890 --> 00:13:01.680
今天 您需要了解的七层OSI模型的唯一真正遗产是编号系统
Today. the only real legacy of the seven layer OSI model that you need to know about is the numbering system.

118
00:13:01.980 --> 00:13:09.250
您经常听到网络工程师将网络层称为第三层 即使它是从底部开始的第二层
You often hear network engineers refer to the network layer as layer three. even though it's the 2nd layer from the bottom.

119
00:13:09.350 --> 00:13:22.270
在互联网模型中 类似地 你会听到人们将以太网称为第七层
In the Internet model. similarly. you'll hear people refer to ethernet as er to as layer seven.
