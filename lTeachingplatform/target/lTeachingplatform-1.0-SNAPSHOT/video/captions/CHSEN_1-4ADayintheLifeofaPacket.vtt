WEBVTT
0
00:00:00.580 --> 00:00:06.390
互联网的四层模型从应用层获取数据流
The four layer model of the Internet takes a stream of data from the application layer. the

1
00:00:06.560 --> 00:00:13.870
传输层将它可靠地传送到另一台计算机上运行的应用程序的数据段中断
transport layer breaks the stream the segments of data that it reliably delivers to an application running on another computer.

2
00:00:14.670 --> 00:00:20.620
传输层将这些段作为网络层数据包发送 由网络端发送
The transport layer send these segments as network layer packets. which the networklare delivers

3
00:00:20.820 --> 00:00:27.680
到另一台计算机 让我们看看实际情况 web浏览器和服务器发送和接收的实际数据包
to the other computer. Let's see what this looks like in practice. the actual packets that a web browser and server send and receive.

4
00:00:30.140 --> 00:00:32.940
首先让我们看看传输层
1st let's look at the transport layer.

5
00:00:33.220 --> 00:00:38.390
几乎所有的网络流量都是通过传输控制协议TCP传输的
Almost all web traffic is over TCP. the transport control protocol.

6
00:00:38.670 --> 00:00:42.830
在它的典型操作中 有一个客户机和一个服务器
In its typical operation. there's a client and a server.

7
00:00:43.270 --> 00:00:52.740
服务器监听连接请求以打开连接 客户端发出连接请求 服务器响应连接请求
A server listens for connection requests to open a connection. A client issues a connection request. which the server responds to.

8
00:00:52.820 --> 00:01:01.140
我不会详细说明这是如何工作的 但事实证明 这种交换需要三个信息 称为三向握手
I won't go into the details of exactly how this works. but it turns out this exchange takes three messages. something called the three way handshake.

9
00:01:02.820 --> 00:01:10.310
消息的第一步是客户端向服务器发送同步消息 通常称为sin
The 1st step of the message is when the client sends a synchronized message the server. often called the sin.

10
00:01:10.870 --> 00:01:22.150
第二步是服务器对同步消息做出响应 该消息同时确认客户端同步 或者同步和确认消息 通常称为synic
The 2nd step is when the server responds at the synchronized message that also acknowledges the client synchronize. or a synchronize and acknowledge message. often called a synic.

11
00:01:23.670 --> 00:01:32.000
第三步也是最后一步是客户端通过确认服务器同步来响应 通常调用一个动作
The 3rd and final step is when the client responds by acknowledging the server synchronize. often call an act.

12
00:01:32.640 --> 00:01:40.320
因此 三种握手通常被描述为同步 同步 确认 确认或sinsynakac
So often. the three handshake is described as synchronize. synchronizing. acknowledge. acknowledge. or sin synak ac.

13
00:01:42.360 --> 00:01:46.840
回想一下 网络巢穴负责向计算机传递包
Recall that the networklair is responsible for delivering packets to computers.

14
00:01:47.170 --> 00:01:50.950
传输层负责向应用程序传递数据
The transport layer is responsible for delivering data to applications.

15
00:01:51.630 --> 00:01:58.190
从网络层的角度来看 发送到同一台计算机上不同应用程序的口袋看起来是一样的
From the perspective of the network layer. pockets sent to different applications on the same computer look the same.

16
00:01:58.870 --> 00:02:04.270
这意味着要打开一个TCP流到另一个程序 我们需要两个地址
This means that to open a TCP stream to another program. we need two addresses.

17
00:02:04.390 --> 00:02:12.310
第一个是Internet协议地址 是网络层用来向计算机发送数据包的地址
The 1st. an Internet protocol address. is the address the network layer uses deliver packets to the computer.

18
00:02:13.160 --> 00:02:25.210
第二 TCP端口告诉计算机软件哪个应用程序将数据传递给运行在tcpport80上的Webb服务器
The 2nd. the TCP port tells the computer software which application to deliver data to Webb servers usually run on tcpport 80.

19
00:02:25.970 --> 00:02:35.050
因此 当我们打开到web服务器的连接时 我们将IP包发送到运行web服务器的计算机 其目的地址是该计算机的IP地址
So when we open a connection to a web server. we send IP packets to the computer running the web server whose destination address is that computers ip address.

20
00:02:35.330 --> 00:02:46.260
这些IP口袋有TCP段 这些段的目的端口是80但是这些IP包是如何到达它们的目的地的呢
Those IP pockets have TCP segments. segments whose destination port is 80 But how do those IP packets get to their destination?

21
00:02:46.690 --> 00:02:49.830
我们没有把我的客户和服务器直接连接起来
We don't have a direct wire connecting my client to the server.

22
00:02:50.150 --> 00:02:54.150
相反 我的客户端连接到一个中间计算机 一个路由器
Instead. my client is connected to an intermediate computer. a router.

23
00:02:54.290 --> 00:03:00.950
这个路由器本身连接到其他路由器 客户端和服务器之间的ip包
This router is itself connected to other routers. ip packets between the client and the server.

24
00:03:01.110 --> 00:03:05.970
花很多跳 其中一个跳是连接两个路由器的链路
Take many of hops where a hop is connect is a link connecting two routers.

25
00:03:07.010 --> 00:03:13.640
因为我的客户端在wifi网络上 所以第一站 第一跳 是无线到wi-fi接入点的
Since my client is on a wifi network. the 1st stop. the 1st hop. is wireless to the wi fi access point.

26
00:03:13.920 --> 00:03:21.060
接入点通过有线连接到更广阔的海洋 所以它能让我的数据包 我的客户 数据包沿着这个有线跳点传输
The access point has a wired connection to the broader ocean. so it affords my packets. my clients. packets along this wired hop.

27
00:03:23.260 --> 00:03:26.060
一个路由器可以有许多链路连接它
A router can have many links connecting it.

28
00:03:26.370 --> 00:03:31.410
当每个数据包到达时 路由器决定将其发送到它的哪条链路上
As each packet arrives. a router decides which of its links to send it out on.

29
00:03:32.170 --> 00:03:46.510
路由器有IP地址 所以也有可能数据包不是发送到它自己的软件 例如 当你使用TCP登录到路由器时 IP数据包是注定要到路由器自己的IP地址的
Routers have IP addresses. so it's also the case that it might not for the packet that rather deliver to its own software. e.g.. when you log into a router using TCP. the IP packets are destined to the router's own IP address.

30
00:03:48.710 --> 00:03:50.990
路由器是如何做出这个决定的呢
How does a router make this decision?

31
00:03:51.230 --> 00:03:55.430
它通过一种叫做负担表的东西来做到这一点 如图所示
It does so through something called a affording table. shown here on the right.

32
00:03:56.390 --> 00:04:02.710
提供表由一组IP地址模式组成 并为每个模式交叉发送链接
Affording table consists of a set of IP address patterns. and linked to send it cross for each pattern.

33
00:04:04.130 --> 00:04:13.470
当一个数据包到达时 路由器检查哪个外部表项的模式与数据包最匹配 并沿着该表项的链接提供数据包
When a packet arrives. the router checks which foreign table entries pattern best matches the packet. it affords the packet along that entry's link.

34
00:04:14.030 --> 00:04:16.990
一般来说 最好意味着最具体
Generally. best means the most specific.

35
00:04:18.300 --> 00:04:22.220
我将在最长前缀匹配的视频中更详细地描述匹配是如何工作的
I'll describe how matching works more detail in the video on longest prefix match.

36
00:04:22.220 --> 00:04:27.570
但是在这个简单的例子中 让我们只使用默认路由 即上表中的第一个条目
But in this simple example. let's just consume the default route. the 1st entry in the table above.

37
00:04:27.770 --> 00:04:30.350
缺省路由是最不特定的路由
The default route is the least specific route.

38
00:04:30.510 --> 00:04:39.940
它匹配每个IP地址 如果数据包到达时没有比默认路由更具体的路由 路由器将只使用默认路由
It matches every IP address. If when a packet arrives there isn't a more specific route than the default route. the router will just use the default one.

39
00:04:42.180 --> 00:04:46.720
缺省路由在边缘网络中尤其有用
The default route is especially useful in edge networks. say. e.g.

40
00:04:46.880 --> 00:04:50.360
你可以在斯坦福大学学习 并有一个路由器连接到更大的互联网
your Stanford University. and have a router connecting you to the larger Internet.

41
00:04:50.520 --> 00:04:55.280
您的路由器将有许多斯坦福网络ip地址的特定路由
Your router will have many specific routes for the ip addresses of Stanfords networks.

42
00:04:55.440 --> 00:05:01.470
通过这个列表发送数据包到工程学院 通过这个链接发送数据包库
Send packets to the engineering school over this list. send packet library over that link.

43
00:05:01.870 --> 00:05:03.590
但如果目的IP地址
But if the destination IP address

44
00:05:03.850 --> 00:05:07.480
在斯坦福 路由器应该把它发送到更大的互联网上
is in Stanfords. and the router should send it out to the larger Internet.

45
00:05:10.160 --> 00:05:11.980
现在我们来看一些
So now let's look at some

46
00:05:12.260 --> 00:05:17.070
IP包在一个真实的我要从www请求一个网页
IP packets in a real I'm going to request a webpage from www

47
00:05:17.370 --> 00:05:19.470
dotbrownI-E视图 并使用一个名为
dot brown I-E view. and use a tool called

48
00:05:19.470 --> 00:05:21.980
Wireshore给你看所有的口袋
Wireshore to show you all of the pockets.

49
00:05:22.500 --> 00:05:25.440
好吧 看看我的浏览器是如何打开一个TCP连接到
Well. see how my web browser opens a TCP connection to

50
00:05:25.560 --> 00:05:34.960
BrownWebb服务器使用一个通过握手的sinsynakAch然后开始发出ACTBget请求 服务器响应它的数据
the Brown Webb server using a through a handshake of sin synak Ach then starts issuing ACTB get requests. which the server responds to it data.

51
00:05:36.500 --> 00:05:47.620
一旦我们看到了我的客户端和BrownUniversityWebb服务器之间的口袋交换 我将使用另一个称为TraceRoute的工具来观察这些数据包通过Internet的路径
Once we've seen the exchange of pockets between my client and the Brown University Webb server. I'll use another tool called Trace Route to observe the path of these packets take through the Internet.

52
00:05:50.060 --> 00:05:52.300
首先 我要启动Shark
So 1st. I'll start up wire Shark.

53
00:05:53.260 --> 00:05:58.070
我的计算机正在使用许多网络应用程序并发送许多不同的数据包
My computer is using many network applications and sending lots of different packets.

54
00:05:58.070 --> 00:06:04.550
我将告诉wireShark只显示TCP段的数据包到Brown服务器 使用端口80
I'm going to tell wire Shark to only display packets that are TCP segments to the Brown server. using Port 80.

55
00:06:04.870 --> 00:06:07.710
这样我们就只能看到我产生的网络流量
This way we'll only see the web traffic I'm generating.

56
00:06:08.910 --> 00:06:15.830
我还会让wireshark监听E-N 这是我的Mac给Wi-Filinklair取的名字
I'm also going to tell wire shark to listen on E-N. which is the name my Mac gives to my Wi Fi linklair.

57
00:06:15.830 --> 00:06:22.970
正如你所看到的 我有许多链接巢穴可用 但让我们只看看E-N一次 因为这是可以如何连接到互联网
As you can see. I have many linklairs available. but let's just look at E-N once. since that's on can how and connected to the Internet.

58
00:06:25.330 --> 00:06:31.690
接下来 我将打开我的网络浏览器并请求布朗大学计算机科学系的网页
Next. I'll open my web browser and request the web page for Brown university's Computer Science Department.

59
00:06:31.930 --> 00:06:35.270
这是我读本科时去的地方 所以我喜欢跟上系里的新闻
This is where I went as an undergraduate. and so I like to keep up with news in the department.

60
00:06:37.430 --> 00:06:42.750
您可以在wireshark中看到 加载此页面涉及发送和接收数据包的想法
You can see in wire shark that loading this page involves sending and receiving a thought of packets.

61
00:06:43.000 --> 00:06:55.280
WireSharks向我展示了每个数据包的时间戳 源IP地址 我支付的目的地 地址 使用的协议 长度和进一步的信息
Wire Sharks shows me the time stamp of each packet. the source IP address. the destination I pay. address. what protocol it uses. it's length and further information.

62
00:06:56.880 --> 00:06:58.760
让我们看看第一个包
Let's look at this 1st packet.

63
00:06:58.800 --> 00:07:03.730
它来自我的电脑 它的地址是一 名字 二 得到一 六 八 那个零点
It's from my computer. whose address is one name. two. got one. six. eight. that zero dot.

64
00:07:03.790 --> 00:07:10.190
一个 哦 六 布朗cs网络服务器的地址是1 2 8 得到1 4 8 得到32
One. Oh. six. to the Brown cs web server whose address is one. two. eight. got one. four. eight. got 32 dot.

65
00:07:10.350 --> 00:07:19.750
十二年级 它将到达TCP端口80 这是服务器上的超文本传输协议端口 我们可以从信息列中的ACTP字段看到
Twelve. It's going to TCP port 80. the hyper text transfer protocol port on the server. which we can see from the ACTP field in the info column.

66
00:07:20.900 --> 00:07:22.760
口袋是罪恶包
The pocket is the sin packet.

67
00:07:22.920 --> 00:07:24.660
第一步是握手
The 1st step of the three a handshake.

68
00:07:27.020 --> 00:07:28.900
看看前三个口袋
Look at these 1st three pockets.

69
00:07:29.020 --> 00:07:32.300
第一个是从我的电脑到网络服务器的接收器
The 1st is a sink from my computer to the web server.

70
00:07:33.280 --> 00:07:38.360
第二个是一个从web服务器返回到我的计算机的反ack包
The 2nd is a sin ack packet from the web server back to my computer.

71
00:07:39.080 --> 00:07:43.410
第三个是一个行为从我的电脑回到网络服务器
The 3rd is an act from my computer back to the web server.

72
00:07:43.750 --> 00:07:45.050
这是三种握手方式
This is the three way handshake.

73
00:07:45.410 --> 00:07:52.030
现在两台计算机可以交换数据了 你可以看到第一个数据包是一个冰冷的请求
Now the two computers can exchange data. and you can see the 1st data packet is an icy depure request.

74
00:07:52.150 --> 00:07:55.190
我的计算机向网络服务器发送了一个get请求
My computer sends a get request to the web server.

75
00:07:56.190 --> 00:07:59.390
这个get请求的响应是三个口袋
The response to this get request is three pockets.

76
00:07:59.830 --> 00:08:07.610
WireShark在接收到第3个时显示响应 如该行所示 其信息为80顶斜杠1 1200
Wire Shark shows the response when it receives the 3rd one. shown in the line. whose info is 80 top slash 1.1 200.

77
00:08:07.770 --> 00:08:23.480
好的 这里我们可以看到我从brown的计算机科学服务器请求一个网页创建了一个tisby连接到三路握手的三路IP包 而不是ATP请求和响应的更多口袋
OK. so here we can see how my requesting a webpage from brown's computer science server creates a tisby connection to the three way three IP packets for the three way handshake. than more pockets for the ATP request and response.

78
00:08:27.240 --> 00:08:32.580
这就是计算机交换时网络在终端主机上的样子
This is how the network looks to the end hosts the computers as they exchange.

79
00:08:32.740 --> 00:08:39.310
网络报文 但是里面是什么样子的这些包是怎么跳的
Packets of the networklare. But how does it look like inside the What hops these packets take?

80
00:08:39.670 --> 00:08:43.510
为了看到这一点 我将使用第二个工具traceRoute
To see this. I'm going to use a 2nd tool. trace Route.

81
00:08:43.870 --> 00:08:48.410
TraceRoute显示数据包到达目的地的跳
Trace Route shows you the hop that packets take to a destination.

82
00:08:49.010 --> 00:08:53.390
我们可以输入traceroutew CS brown
So we can type trace route W-W dot. CS dot brown.

83
00:08:53.550 --> 00:09:11.650
但是ev通过互联网看到的路径 或者是W标志 它指定了超时时间 超时时间为1S 数据包的第一跳是192 那168 那0 那1
But ev to see the path through the Internet. or the dash W flag. which specifies a time out with a time out of 1 S. the 1st hop the packets take it's to my wireless router beside Piadris is one. nine. two. that one. six. eight. that zero. that one.

84
00:09:12.650 --> 00:09:15.130
你可以从下一个顶部看到 我在家里
As you can see from the next top. I'm at home.

85
00:09:15.370 --> 00:09:18.070
我有一个有线调制解调器 我的网络供应商很棒
I have a cable modem. and my Internet provider is a stound.

86
00:09:19.150 --> 00:09:24.510
在这之后 磁铁 再跳一跳到IP地址为74的IP路由器
After this. magnets. take another hop to an IP router with IP address 74.

87
00:09:24.670 --> 00:09:27.170
点乘14等于0点乘3
Dot 14 does zero. dot three.

88
00:09:28.810 --> 00:09:32.610
再下一跳是加州旧金山的一个路由器
The hop after that is a router in San Francisco. california.

89
00:09:33.140 --> 00:09:45.420
然后是圣何塞的几个路由器 SJC为上面的点net 圣何塞赢得三级点net之后 圣何塞赢得三级点net
Then several routers in San Jose. SJC for above dot net. and San Jose won for level three do after San Jose won that. level three dot net.

90
00:09:45.580 --> 00:09:47.720
这些包遍布美国和纽约
The packets are across the United States and New York.

91
00:09:48.070 --> 00:09:50.450
它们要经过纽约的一系列路由器
They go through a series of routers in New York.

92
00:09:50.610 --> 00:10:02.160
然后在跳13到波士顿 通常是非常接近普罗维登斯 或者布朗是在海洋之后 或者 我们看到三颗星星
EBR cs W EBR Then on Hop 13 to Boston. often is very close to providence. or Brown is after ocean or. we see three stars.

93
00:10:02.460 --> 00:10:05.480
这意味着有一个路由器不会告诉跟踪它自己
This means there's a router that won't tell trace round about itself.

94
00:10:05.760 --> 00:10:08.580
星星是痕迹路线 显示它等待的一种方式
The stars are trace routes. way to show it waited for a

95
00:10:08.740 --> 00:10:15.440
申请并注明答复时间 在第20跳 我们看到了一个路由器和布朗计算机系
apply with a reply time. On hop 20. we see a router and Brown CS Department.

96
00:10:15.600 --> 00:10:16.150
后
After

97
00:10:16.340 --> 00:10:19.940
一切都被隐藏起来了 布朗CS系不希望能够看到
that. everything is hidden. Brown CS Department doesn't want to be able to see with

98
00:10:20.060 --> 00:10:24.590
网络内部的其他部分看起来是这样的
the rest in the inside of its network looks like.

99
00:10:25.870 --> 00:10:29.860
因为我们看不到布朗的网络服务器的尽头
because we couldn't see the path end with Browns web server.

100
00:10:30.020 --> 00:10:30.390
让我们尝试
Let's try

101
00:10:30.580 --> 00:10:34.760
另一个 麻省理工学院的计算机科学和人工智能实验室SeaSale
another one. The Computer Science and Artificial Intelligence lab Sea Sale at MIT.

102
00:10:36.800 --> 00:10:41.200
我们可以看到 在第15跳之前 数据包都是从同一条路径发送到波士顿的
We can see the packets take the same path to Boston until hop 15.

103
00:10:41.990 --> 00:10:54.690
brown的路径在第15跳走向海洋 而MIT的路径在第三级网络中继续在通往www的路径上 sea航行了MITdaEDI
The path of brown goes to ocean at hop 15. while the path MIT continues in level threes network On the path to www. sea sailed that MIT da EDI.

104
00:10:54.870 --> 00:10:58.610
只有两个路由器隐藏在第13和19跳
Only two routers are hidden the 13th and 19th hops.

105
00:10:58.970 --> 00:11:05.970
我们可以看到 c航行在麻省理工学院也叫阿克伦 c销售在MITU
We can see the www that c sailed on MIT is also named Akron. that c sales at MITU.

106
00:11:06.050 --> 00:11:12.100
22跳之后 我电脑的口袋到达了麻省理工学院的网络服务器
And after 22 hops. pockets from my computer reach mit's web server.

107
00:11:13.260 --> 00:11:20.680
看看时间值 从我的口袋到达MIT网络服务器的时间 它的响应转向了我
Look at the time values. the time from my pocket to reach the MIT web server. and its response turned to me there and back.

108
00:11:20.840 --> 00:11:25.460
往返时间不到90毫秒 或少于一个I眨眼
The round trip time is under 90 milliseconds. or less than an I blink.

109
00:11:29.180 --> 00:11:38.690
我们现在已经看到了数据包的生活 从应用级客户端开始 web请求 经过近20个因特网跳来读取这个目的地
We've now seen the life a packet. starting as an application level client. web request and taking nearly 20 hops of the Internet to read this destination.

110
00:11:38.740 --> 00:11:41.700
对我来说 这是教这门课最棒的事情之一
For me. this is one of the best things about teaching this course.

111
00:11:41.780 --> 00:11:45.620
我们所展示的一切都是你我每天都会接触到的东西
Everything we present is something that you and I interact with every day.

112
00:11:45.840 --> 00:12:00.150
即使在看一个视频的空间里 也很容易看到实践中的原则和思想 只需几个简单的工具 你就可以实时检查互联网的运行情况
Even there's in the space of watching one video. it's easy to see the principles and ideas in practice. and with just a few simple tools. you can inspect the Internet in operation in real time.
