WEBVTT
0
00:00:00.580 --> 00:00:06.390
The four layer model of the Internet takes a stream of data from the application layer. the

1
00:00:06.560 --> 00:00:13.870
transport layer breaks the stream the segments of data that it reliably delivers to an application running on another computer.

2
00:00:14.670 --> 00:00:21.960
The transport layer send these segments as network layer packets. which the networklare delivers to the other computer.

3
00:00:22.360 --> 00:00:23.740
Let's see what this looks like in

4
00:00:24.140 --> 00:00:27.680
practice. the actual packets that a web browser and server send and receive.

5
00:00:30.140 --> 00:00:32.940
1st let's look at the transport layer.

6
00:00:33.260 --> 00:00:38.390
Almost all web traffic is over TCP. the transport control protocol.

7
00:00:38.670 --> 00:00:42.830
In its typical operation. there's a client and a server.

8
00:00:43.270 --> 00:00:52.740
A server listens for connection requests to open a connection. A client issues a connection request. which the server responds to.

9
00:00:52.820 --> 00:01:01.140
I won't go into the details of exactly how this works. but it turns out this exchange takes three messages. something called the three way handshake.

10
00:01:02.820 --> 00:01:10.310
The 1st step of the message is when the client sends a synchronized message the server. often called the sin.

11
00:01:10.870 --> 00:01:22.150
The 2nd step is when the server responds at the synchronized message that also acknowledges the client synchronize. or a synchronize and acknowledge message. often called a synic.

12
00:01:23.670 --> 00:01:32.000
The 3rd and final step is when the client responds by acknowledging the server synchronize. often call an act.

13
00:01:32.640 --> 00:01:40.200
So often the three handshake is described as synchronize. synchronizing. acknowledge acknowledge. or sin synack act.

14
00:01:42.360 --> 00:01:46.840
Recall that the networklare is responsible for delivering packets to computers.

15
00:01:47.170 --> 00:01:50.950
The transport layer is responsible for delivering data to applications.

16
00:01:51.630 --> 00:01:58.190
From the perspective of the network layer. pockets sent to different applications on the same computer look the same.

17
00:01:58.870 --> 00:02:04.270
This means that to open a TCP stream to another program. we need two addresses.

18
00:02:04.390 --> 00:02:12.310
The 1st. an Internet protocol address. is the address the network layer uses deliver packets to the computer.

19
00:02:13.160 --> 00:02:25.210
The 2nd. the TCP port. tells the computer software which application to deliver data to Webb servers usually run on TCP port 80.

20
00:02:25.970 --> 00:02:35.050
So when we open a connection to a web server. we send IC packets to the computer running the web server whose destination address is that computers IP address.

21
00:02:35.330 --> 00:02:46.260
Those IP pockets have TCP segments. segments whose destination port is 80 But how do those IP packets get to their destination?

22
00:02:46.690 --> 00:02:49.830
We don't have a direct wire connecting my client to the server.

23
00:02:50.150 --> 00:02:54.150
Instead. my client is connected to an intermediate computer a router.

24
00:02:54.290 --> 00:03:00.950
This router is itself connected to other routers. ip packets between the client and the server.

25
00:03:01.110 --> 00:03:05.970
Take many of hops where a hop is connect is a link connecting two routers.

26
00:03:07.010 --> 00:03:13.640
Since my client is on a wifi network. the 1st stop. the 1st hop. is wireless to the wi fi access point.

27
00:03:13.920 --> 00:03:21.060
The access point has a wired connection to the broader ocean. so it affords my packets. my clients. packets along this wired hop.

28
00:03:23.260 --> 00:03:25.900
A router can have many links connecting.

29
00:03:26.370 --> 00:03:31.410
As each packet arrives. a router decides which of its links to send it out on.

30
00:03:32.170 --> 00:03:46.510
Routers have IP addresses. so it's also the case that it might not for the packet that rather deliver to its own software. e.g.. when you log into a router using TCP. the IP packets are destined to the router's own IP address.

31
00:03:48.710 --> 00:03:50.990
How does a router make this decision?

32
00:03:51.230 --> 00:03:55.430
It does so through something called a affording table. shown here on the right.

33
00:03:56.390 --> 00:04:02.710
Affording table consists of a set of IP address patterns. and linked to send it cross for each pattern.

34
00:04:04.130 --> 00:04:13.470
When a packet arrives. the router checks which foreign table entries pattern best matches the packet. it affords the packet along that entry's link.

35
00:04:14.030 --> 00:04:16.990
Generally. best means the most specific.

36
00:04:18.300 --> 00:04:22.220
I'll describe how matching works more detail in the video on longest prefix match.

37
00:04:22.220 --> 00:04:27.570
But in this simple example. let's just consume the default route. the 1st entry in the table above.

38
00:04:27.770 --> 00:04:30.350
The default route is the least specific route.

39
00:04:30.510 --> 00:04:39.940
It matches every IP address. If when a packet arrives there isn't a more specific route than the default route. the router will just use the default one.

40
00:04:42.180 --> 00:04:46.720
The default route is especially useful in edge networks. say. e.g.

41
00:04:46.880 --> 00:04:50.360
your Stanford University. and have a router connecting you to the larger Internet.

42
00:04:50.520 --> 00:04:55.280
Your router will have many specific routes for the ip addresses of Stanfords networks.

43
00:04:55.440 --> 00:05:01.010
Send packets to the engineering school over this list. send packet library over that link.

44
00:05:01.870 --> 00:05:02.570
But if the

45
00:05:02.710 --> 00:05:07.480
destination IP address is in Stanfords. and the router should send it out to the larger Internet.

46
00:05:10.160 --> 00:05:11.980
So now let's look at some

47
00:05:12.260 --> 00:05:17.070
IP packets in a real I'm going to request a webpage from www

48
00:05:17.370 --> 00:05:19.470
dot brown I-E view and use a tool called

49
00:05:19.470 --> 00:05:21.980
wireshot to show you all of the pockets.

50
00:05:22.500 --> 00:05:28.390
We'll see how my web browser opens a TCP connection to the Brown Webb server using a through a handshake of sin

51
00:05:28.480 --> 00:05:34.960
synak Ac then starts issuing ACTB get requests. which the server responds to it data.

52
00:05:36.500 --> 00:05:47.620
Once we've seen the exchange of packets between my client and the Brown University Webb server. I'll use another tool called Trace Route to observe the path of these packets take through the Internet.

53
00:05:50.060 --> 00:05:58.070
So 1st. I'll start up wire Shark. because my computer is using many network applications and sending lots of different packets.

54
00:05:58.070 --> 00:06:04.550
I'm going to tell wire Shark to only display packets that are TCP segments to the Brown server. using Port 80.

55
00:06:04.870 --> 00:06:07.710
This way we'll only see the web traffic I'm generating.

56
00:06:08.910 --> 00:06:15.830
I'm also going to tell wire shark to listen on E-N. which is the name my Mac gives to my Wi Fi linklair.

57
00:06:15.830 --> 00:06:22.970
As you can see. I have many linklairs available. but let's just look at E-N once since that song. can how im connected to the Internet?

58
00:06:25.330 --> 00:06:31.690
Next. ill open my web browser and request the web page for Brown universitys Computer Science Department.

59
00:06:31.930 --> 00:06:35.270
This is where I went as an undergraduate. and so I like to keep up with news in the department.

60
00:06:37.430 --> 00:06:42.750
You can see in wire shark that loading this page involves sending and receiving a thought of the packets.

61
00:06:43.000 --> 00:06:55.280
Wire Sharks shows me the time stamp of each packet. the source IP address. the destination I pay. address. what protocol it uses. it's length. and further information.

62
00:06:56.880 --> 00:06:58.760
Let's look at this 1st packet.

63
00:06:58.800 --> 00:07:03.730
It's from my computer. whose address is one name. two. got one. six. eight. that zero dot.

64
00:07:03.790 --> 00:07:10.190
One. Oh. six to the brown cs web server. whose address is one. two. eight. got one. four. eight. got 32 dot.

65
00:07:10.350 --> 00:07:19.750
Twelve. It's going to TCP port 80. the hyper text transfer protocol port on the server. which we can see from the ACTP field in the info column.

66
00:07:20.900 --> 00:07:22.760
The pocket is the sin packet.

67
00:07:22.920 --> 00:07:24.660
The 1st step of the three a handshake.

68
00:07:27.020 --> 00:07:28.900
Look at these 1st three pockets.

69
00:07:29.020 --> 00:07:32.300
The 1st is a sink from my computer to the web server.

70
00:07:33.280 --> 00:07:38.360
The 2nd is a sin ack packet from the web server back to my computer.

71
00:07:39.080 --> 00:07:43.410
The 3rd is an act from my computer back to the Webb server.

72
00:07:43.750 --> 00:07:45.050
This is the three way handshake.

73
00:07:45.410 --> 00:07:52.030
Now the two computers can exchange data. and you can see the 1st data packet is an icy depure request.

74
00:07:52.150 --> 00:07:55.190
My computer sends a get request to the web server.

75
00:07:56.190 --> 00:07:59.390
The response to this get request is three pockets.

76
00:07:59.830 --> 00:08:07.610
Wire Shark shows the response when it receives the 3rd one. shown in the line. whose info is 80 top slash 1.1 200.

77
00:08:07.770 --> 00:08:23.480
OK. so here we can see how my requesting a webpage from brown's computer science server creates a tisby connection to the three way three IP packets for the three way handshake. than more pockets for the ATP request and response.

78
00:08:27.240 --> 00:08:32.580
This is how the network looks to the end hosts the computers as they exchange.

79
00:08:32.740 --> 00:08:39.310
Packets of the networklare. But how does it look like inside the What hops these packets take?

80
00:08:39.670 --> 00:08:43.510
To see this. I'm going to use a 2nd tool. trace Route.

81
00:08:43.870 --> 00:08:48.410
Trace Route shows you the hop that packets take to a destination.

82
00:08:49.010 --> 00:08:53.390
So we can type trace route W-W dot CS dot brown.

83
00:08:53.550 --> 00:09:07.510
But ev to see the path through the Internet. or the dash W flag. which specifies a time out with a time out of 1 S. the 1st hop the packets take it's to my wireless router.

84
00:09:07.670 --> 00:09:11.650
Beside Piadris is one. nine. two. that one. six. eight. that zero. that one.

85
00:09:12.650 --> 00:09:15.130
As you can see from the next top. I'm at home.

86
00:09:15.370 --> 00:09:18.070
I have a cable modem. and my Internet provider is a stound.

87
00:09:19.150 --> 00:09:24.510
After this. magnets. take another hop to an IP router with IP address 74.

88
00:09:24.670 --> 00:09:27.170
Dot 14. does zero. dot three.

89
00:09:28.810 --> 00:09:40.420
The hop after that is a router in San Francisco. california. then several routers in San Jose. SJC for above dot net. and San Jose won for level three.

90
00:09:42.320 --> 00:09:45.420
After San Jose won that. level three dot Net.

91
00:09:45.580 --> 00:09:47.720
The packets are across the United States and New York.

92
00:09:48.070 --> 00:09:50.450
They go through a series of routers in New York.

93
00:09:50.610 --> 00:10:02.160
EBR cs W EBR Then on Hop 13 to Boston. often is very close to providence. or Brown is after ocean or. we see three stars.

94
00:10:02.460 --> 00:10:05.630
This means there's a router that won't tell trace round about itself.

95
00:10:05.760 --> 00:10:07.300
The stars are trace routes. way

96
00:10:07.660 --> 00:10:10.040
to show it. Wage for a apply with a reply time.

97
00:10:11.960 --> 00:10:15.440
On hop 20. we see a router and Brown CS Department.

98
00:10:15.600 --> 00:10:16.150
After

99
00:10:16.340 --> 00:10:19.940
that. everything is hidden. Brown CS Department doesn't want to be able to see with

100
00:10:20.060 --> 00:10:24.590
the rest in the inside of its network looks like.

101
00:10:25.870 --> 00:10:29.860
because we couldn't see the path end with browns web server.

102
00:10:30.020 --> 00:10:33.390
Let's try another one. the Computer Science and Artificial Intelligence Lab Sea

103
00:10:33.580 --> 00:10:41.200
sale at MIT. We can see the packets take the same path to Boston until hop 15.

104
00:10:41.990 --> 00:10:54.690
The path of brown goes to ocean at hop 15. while the path MIT continues in level threes network On the path to www. sea sailed that MIT. da EDI.

105
00:10:54.870 --> 00:10:58.610
Only two routers are hidden the 13th and 19th hops.

106
00:10:58.970 --> 00:11:05.970
We can see the www that c sailed on MIT is also named Akron. that c sales at MITU.

107
00:11:06.050 --> 00:11:12.100
And after 22 hops. pockets from my computer reach mit's web server.

108
00:11:13.260 --> 00:11:20.680
Look at the time values. the time from my pocket to reach the MIT web server. and its response turned to me there and back.

109
00:11:20.840 --> 00:11:27.660
The round trip time is under 90 milliseconds. or less than an I blinks.

110
00:11:29.180 --> 00:11:38.690
We've now seen the life a packet. starting as an application level client. web request and taking nearly 20 hops of the Internet to read this destination.

111
00:11:38.740 --> 00:11:41.700
For me. this is one of the best things about teaching this course.

112
00:11:41.780 --> 00:11:45.620
Everything we present is something that you and I interact with every day.

113
00:11:45.840 --> 00:12:00.150
Even there's in the space of watching one video. it's easy to see the principles and ideas in practice. and with just a few simple tools. you can inspect the Internet in operation in real time.
