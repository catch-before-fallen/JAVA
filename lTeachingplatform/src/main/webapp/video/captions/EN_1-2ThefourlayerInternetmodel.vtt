WEBVTT
0
00:00:00.700 --> 00:00:06.030
In the last video. you learned how a variety of different applications. such as bit. torrent. skype

1
00:00:06.320 --> 00:00:13.380
and the Webb. all communicate over the Internet using a very similar model. basically a bidirectional. reliable bitestream.

2
00:00:13.780 --> 00:00:15.640
Takes a lot of different pieces working

3
00:00:16.000 --> 00:00:19.580
together to create this reliable communication model for our applications.

4
00:00:20.050 --> 00:00:32.460
But even though we use a huge variety of different Internet applications sending many kinds of data at very different speeds. there are surprisingly strong similarities in the way applications send and receive data.

5
00:00:32.760 --> 00:00:40.210
E.G.. applications want to send and receive data without having to worry about the path or route that the data takes across the Internet.

6
00:00:40.380 --> 00:00:50.230
And almost all applications want to be confident that their data is correctly received. with any lost or corrupted data automatically retransmitted until it's received correctly.

7
00:00:51.470 --> 00:01:06.200
The early Internet pioneers created the four layer Internet model to describe the hierarchy of operations that make up the Internet. so that applications can reuse the same building blocks over and over again. without having to create them from scratch for every new application.

8
00:01:06.480 --> 00:01:12.520
Layering is really important and frequently used concept in networking. and will be seeing it many. many times throughout this course.

9
00:01:12.690 --> 00:01:19.470
As even a video devoted just to the concept of layering. let's look at what each layer of the four layer Internet model does.

10
00:01:19.680 --> 00:01:25.900
It helps to remember that all four layers are there to enable applications in the end hosts to communicate reliably.

11
00:01:26.050 --> 00:01:28.970
To explain how it works. I'm going to start at the bottom layer.

12
00:01:29.270 --> 00:01:40.560
We'll see that each layer has a different responsibility. with each layer building a service on top of the one below. all the way to the top. where we have the bidirectional. reliable bitestream communication between applications.

13
00:01:40.790 --> 00:01:41.630
OK. let's start with a link.

14
00:01:41.790 --> 00:01:46.410
There. The Internet is made up of end hosts. links and routers.

15
00:01:46.640 --> 00:01:49.440
Data is delivered hot by hop over reach Lincoln turn.

16
00:01:49.820 --> 00:01:51.400
Data is lit. delivered in packets.

17
00:01:51.600 --> 00:02:07.140
A packet is a self contained unit consisting of the data we want to be delivered. along with a header that tells the network. where the packet is to be delivered. where it came from. and so on The linklair's job is to carry the data over. one link at a time.

18
00:02:07.530 --> 00:02:09.350
You've probably heard of ethernet and wifi.

19
00:02:09.570 --> 00:02:12.070
These are two examples of different link players.

20
00:02:14.030 --> 00:02:18.600
The next layer up is for us. the most important layer. the network layer.

21
00:02:18.720 --> 00:02:25.920
The networks layer's job is to deliver packets end to end across the Internet. from the source to the destination.

22
00:02:26.140 --> 00:02:28.580
A packet is an important building block in the network.

23
00:02:28.740 --> 00:02:39.000
A packet is the name we give to that collection of data. with the header and the head of that describes what the data is. where it's going and where it came from. as we saw in the last light. you'll often see pack packets drawn like this.

24
00:02:40.830 --> 00:02:43.430
No what layer packets are called datagrams.

25
00:02:43.470 --> 00:02:51.610
They consist of some data and a header containing the two and from addresses. just like we put the two and from addresses in a letter.

26
00:02:53.410 --> 00:03:00.070
The network hands the datagram to the link layer. telling it to send the datagram over the 1st link.

27
00:03:00.090 --> 00:03:03.530
In other words. the link layer is providing a service to the network layer.

28
00:03:03.800 --> 00:03:10.440
Essentially. the link layer is saying. if you give me a datagram to send. I'll transmit it over one link for you.

29
00:03:12.440 --> 00:03:14.520
At the other end of the link is a router.

30
00:03:14.820 --> 00:03:21.160
The link layer of the router accepts the datagram from the link and hands it up to the network layer inside the router.

31
00:03:21.380 --> 00:03:30.300
The network layer on the router examines the destination address of the datagram and is responsible for routing the datagram. one hop at a time. towards its eventual destination.

32
00:03:30.570 --> 00:03:44.170
It does this by sending it to the link layer again to carried over the next link. which is passed to the network layer at the next router. and so on. until it reaches the network layer at the destination.

33
00:03:44.330 --> 00:03:53.030
Eventually. notice that the network layer does not need to concern itself with how the link layer sends the telegram over each link.

34
00:03:53.380 --> 00:03:55.920
In fact. different link layers work in very different ways.

35
00:03:55.960 --> 00:04:00.720
Ethanette and wifi are clearly very different. and we're going to be learning about them in more detail later.

36
00:04:00.990 --> 00:04:08.840
This separation of concerns between the network layer and the link layer allows each to focus on its job without worrying about how the other layer works.

37
00:04:09.040 --> 00:04:16.440
It also means that a single network layer has a common way to talk to many different link layers by simply handing them datagrams to send.

38
00:04:16.470 --> 00:04:24.590
This separation of concerns is made possible by the modularity of each layer and a common. well defined API to the layer below.

39
00:04:27.130 --> 00:04:29.690
In the Internet. the network layer is special.

40
00:04:29.850 --> 00:04:33.930
When we send packets into the Internet. we must use the Internet protocol.

41
00:04:34.400 --> 00:04:38.320
It is the Internet protocol. or IP. that holds the Internet together.

42
00:04:38.700 --> 00:04:44.200
We learn more about the details of IP and later videos. but for now. it's good to know some basic facts about IP.

43
00:04:45.690 --> 00:04:52.480
1st of all. IP makes a best effort attempt to deliver our datagrams to the other end. but it makes no promises.

44
00:04:53.080 --> 00:04:55.800
2nd IP Datagrams can get lost.

45
00:04:56.180 --> 00:04:58.790
They can be delivered out of order. and they can be corrupted.

46
00:04:58.970 --> 00:05:03.990
There are no guarantees. This may come as a surprise.

47
00:05:04.210 --> 00:05:09.610
You might be asking. how can the Internet work at all when the packets are not guaranteed to be delivered?

48
00:05:10.370 --> 00:05:19.470
Well. if an application wants a guarantee that its data will be re transmitted when necessary and will be delivered to the application in order and without corruption.

49
00:05:19.720 --> 00:05:22.960
then it needs another protocol running on top of IP.

50
00:05:23.160 --> 00:05:25.720
That's the job of the transport lab.

51
00:05:27.810 --> 00:05:32.750
The most common transport layer is TCP. or the Transmission Control Protocol.

52
00:05:32.910 --> 00:05:38.330
Youve probably heard of TCPPIP. which is when an application uses both TCP and IP together.

53
00:05:39.780 --> 00:05:49.270
Tcp's job is to make sure that the data sent by an application at one end of the Internet is correctly delivered in the right order to the application at the other end of the Internet.

54
00:05:49.690 --> 00:05:55.290
If the network layers drop some datagrams. TCP will transmit them multiple times. if need be.

55
00:05:55.530 --> 00:06:04.700
If the network lower delivers them out of order. perhaps because two packets follow a different path to their destination. TCP will put the data back into the correct order again.

56
00:06:04.900 --> 00:06:08.940
In later videos. you'll learn a lot about TCP and how it works.

57
00:06:09.050 --> 00:06:17.510
For now. the main thing you need to remember is that TCP provides a service to an application that guarantees correct in order delivery of data.

58
00:06:17.670 --> 00:06:33.260
Running on top of the network layer service. the network less layer is providing an unreliable datagram delivery service underneath. as I'm sure you can imagine. applications such as a web client or an email client find TCP very useful. indeed.

59
00:06:33.340 --> 00:06:40.860
By employing TCP to make sure data is delivered correctly. they don't have to worry about implementing all of the mechanisms inside the application.

60
00:06:41.170 --> 00:06:49.580
They can take advantage of the huge effort that other developers have put into correctly implementing TCP over the years. and then reuse it to deliver delay data correctly.

61
00:06:49.620 --> 00:06:57.900
Reuse is a big advantage of layering. but not all applications need data to be delivered correctly.

62
00:06:57.970 --> 00:07:06.250
E.g.. if a video conference application is sending a snippet of video in a packet. there may be no point waiting for the packet to be re transmitted multiple times.

63
00:07:06.680 --> 00:07:11.260
Better to just move on. Some applications just don't need the TCP service.

64
00:07:11.740 --> 00:07:18.270
If an application doesn't need reliable delivery. it can use the much simpler UDP or use a datagram protocol.

65
00:07:18.430 --> 00:07:25.890
Instead. UDP is an alternative transport layer that bundles up application data and hands it to the network layer for delivery to the other end.

66
00:07:26.050 --> 00:07:28.730
EDP offers no delivery guarantees at all.

67
00:07:29.530 --> 00:07:36.570
In other words. an application has the choice of at least two different transport layers services TCP and UDP.

68
00:07:36.930 --> 00:07:41.790
There are. in fact. many other choices too. but these are the most commonly used transport layer services.

69
00:07:44.110 --> 00:07:48.270
Finally. we have the application layer at the top of the four layer model.

70
00:07:48.570 --> 00:07:52.370
There are. of course. many thousands of applications using the Internet.

71
00:07:52.650 --> 00:08:02.060
While each application is different. it can reuse the transport layer by using the well defined API from the application layer to the TCP or UTP service beneath.

72
00:08:03.210 --> 00:08:10.130
As we saw in the last video. applications typically want a bidirectional. reliable bite strain between two and points.

73
00:08:10.510 --> 00:08:12.730
They can send whatever bites dream they want.

74
00:08:12.890 --> 00:08:18.430
And applications have their own protocol to define the syntax and semantics of data flowing between the two endpoints.

75
00:08:20.620 --> 00:08:28.410
E.g.. as we saw in the last video. when a web client requests a page from a web server. the web client sends a get request.

76
00:08:28.830 --> 00:08:32.930
This is one of the commands of the Hypertext Transfer protocol. or HTTP.

77
00:08:33.420 --> 00:08:40.540
HDTP dictates that the get command is sent as an asky string along with the url of the page being requested.

78
00:08:41.750 --> 00:08:50.070
As far as the application layer is concerned. the get request is sent directly to its peer at the other end. the web server application.

79
00:08:51.870 --> 00:08:57.670
The application doesn't need to know how the data got there or how many times it needed to be re transmitted.

80
00:08:57.870 --> 00:09:05.280
At the Webb client. the application layer hands the get request to the TCPLA. which provides the service of making sure it is reliably delivered.

81
00:09:05.440 --> 00:09:09.980
It does this using the services of the network layer. which in turn uses the services of the link layer.

82
00:09:10.150 --> 00:09:13.190
We say that each layer communicates with its peer layer.

83
00:09:13.570 --> 00:09:31.580
It's as if each layer is only communicating with the same layer at the other end of the link. or Internet. without regard for how the layer below gets the data there. putting it all together. then network engineers find it convenient to arrange all the functions that make up the Internet into layers.

84
00:09:31.860 --> 00:09:38.450
The top is the application. such as Bitterrent or Skype or the World Wide Webb. which talks to its peer layer at the destination.

85
00:09:38.570 --> 00:09:47.220
When the application has data to send. it hands the data to the transport layer. which has the job of delivering the data reliably or not to the other end.

86
00:09:47.420 --> 00:09:55.760
The transport layer sends data to the other end by handing it to the network layer. which has the job of breaking the data into packets. each with the correct destination addressed.

87
00:09:55.920 --> 00:10:00.880
Finally. the packets are handed to the link layer. which has the responsibility of delivering the packet from one hop to the next.

88
00:10:01.040 --> 00:10:05.630
Along its path. the data makes its way hot by hop from one route to the next.

89
00:10:05.790 --> 00:10:09.800
The network layer affords it to the next router. one at a time until it reaches the destination.

90
00:10:09.960 --> 00:10:13.710
There. the data is passed up the layers until it reaches the application.

91
00:10:15.300 --> 00:10:17.910
So in summary. applications by

92
00:10:18.360 --> 00:10:21.780
directional. reliable bitestream between applications. typically. but not always.

93
00:10:21.860 --> 00:10:22.590
And they use

94
00:10:22.700 --> 00:10:25.240
application specific semantics. which will be

95
00:10:25.400 --> 00:10:28.340
learning about later. such as HTTP or bit torrent.

96
00:10:28.960 --> 00:10:38.470
The transport layer typically guarantees correct in order delivery of data and to end and controls congestion. although some applications don't need this. and so they can use a different transport layer.

97
00:10:38.630 --> 00:10:46.230
Instead. the network layer delivers datagrams. and to end. it's providing a best effort delivery service with no guarantees.

98
00:10:46.390 --> 00:10:48.090
We must use the Internet protocol.

99
00:10:48.420 --> 00:10:53.700
The Link lad delivers data of a single link between an end host and ARTR. or between two routers.

100
00:10:55.980 --> 00:11:04.380
There's two extra things I'd like you to know erred to as the thin waste of the Internet.

101
00:11:04.980 --> 00:11:09.760
This is because if we want to used the Internet. we have to use the Internet protocol.

102
00:11:09.920 --> 00:11:13.900
We have no choice. But we have lots of choices for linked players.

103
00:11:14.310 --> 00:11:20.810
IP runs over many. many different link layers. such as ethernet. wifi. dsl G. cellular and so on.

104
00:11:21.330 --> 00:11:26.250
And on top of the I-P-L. we can choose between many different transport layers.

105
00:11:26.670 --> 00:11:28.970
We are already heard about TCP and UDP.

106
00:11:29.190 --> 00:11:32.430
There's also RTP for real time data. and many others too.

107
00:11:32.590 --> 00:11:36.370
And of course. there are tens of thousands of different applications sitting on top.

108
00:11:38.910 --> 00:11:48.410
The 2nd thing I want you to know is that in the 1980s. the International Standards Organization. or ISO. created a seven layer model to represent any type of network.

109
00:11:49.090 --> 00:11:54.130
It was called the Seven Layer Open Systems Interconnection. or OSI model.

110
00:11:54.260 --> 00:12:00.900
We don't need to spend any time on it in this course. because it's been replaced by the four layer Internet model for all intense and purposes.

111
00:12:01.100 --> 00:12:03.840
But if you're interested. you'll find any networking textbook.

112
00:12:04.000 --> 00:12:07.780
And Wikipedia describes the seven layers in lots and lots of detail.

113
00:12:09.950 --> 00:12:15.880
The seven layer model defines layers that were combined in the four layer Internet model later. e.g.

114
00:12:16.040 --> 00:12:29.570
what we call the link that link layer today. was separated into the link layer that defined the framing format. and the physical layer. that defined things like the voltage levels on the cable or the physical dimensions of a connector.

115
00:12:30.580 --> 00:12:34.620
The network layer is pretty much the same in both models.

116
00:12:36.140 --> 00:12:39.640
The transport and applications layer is each represented by two layers.

117
00:12:39.660 --> 00:12:47.120
In the USA models. these are examples of commonly used Internet protocols. e.g.

118
00:12:47.280 --> 00:12:54.850
HDTP. which passes most of its data in the protocol in Asky. and how they mapped to the USA numbering scheme.

119
00:12:55.890 --> 00:13:01.680
Today. the only real legacy of the seven layer OSI model that you need to know about is the numbering system.

120
00:13:01.980 --> 00:13:09.250
You often hear network engineers refer to the network layer as layer three. even though it's the 2nd layer from the bottom.

121
00:13:09.350 --> 00:13:22.270
In the Internet model. similarly. you'll hear people refer to ethernet as er to as layer seven.
